{
	"Define bloc state": {
		"prefix": "blocstate",
		"description": "blocstate",
		"scope": "dart",
		"body": [
			"part of '${2:file_name}_bloc.dart';",
			"",
			"enum ${1:State}Validation {",
			"  success,",
			"  unknownError,",
			"  missingEmail,",
			"}",
			"",
			"@immutable",
			"@freezed",
			"class ${1:State}State with _\\$${1:State}State, ErrorState {",
			"  const factory ${1:State}State({",
			"    @Default([]) List<${1:State}Validation> validations,",
			"    @Default('') String email,",
			"    @Default(false) bool isLoading,",
			"    @Default(null) int? statusCode,",
			"    @Default(null) String? errorCode,",
			"    @Default(null) String? errorMsg,",
			"  }) = _${1:State}State;",
			"}"
		]
	},
	"Define Bloc event": {
		"prefix": "blocevent",
		"description": "blocevent",
		"scope": "dart",
		"body": [
			"part of '${3:file_name}_bloc.dart';",
			"",
			"abstract class ${1:Event}Event {}",
			"",
			"@freezed",
			"class ${2:An event} extends ${1:Event}Event",
			"    with _\\$${2:An event} {",
			"  const factory ${2:An event}(String email) =",
			"      _${2:An event};",
			"}",
			""
		]
	},
	"page": {
		"prefix": "page",
		"description": "page",
		"scope": "dart",
		"body": [
			"import 'package:flutter/material.dart';",
			"import 'package:flutter_modular/flutter_modular.dart';",
			"import 'package:flutter_bloc/flutter_bloc.dart';",
			"",
			"class ${1:Page Name}Page extends StatelessWidget {",
			"  const ${1:Page Name}Page({super.key});",
			"",
			"  @override",
			"  Widget build(BuildContext context) => Scaffold(",
			"        appBar: AppBar(",
			"          title: 'title',",
			"          automaticallyImplyLeading: false,",
			"        ),",
			"        body: MultiBlocProvider(",
			"          providers: [",
			"            BlocProvider(",
			"              create: (context) => ${1:Page Name}Bloc(",
			"                Modular.get<Repository>(),",
			"                Modular.get<CrashReporter>(),",
			"                Modular.get<Logger>(),",
			"              ),",
			"            ),",
			"          ],",
			"          child: _${1:Page Name}Form(),",
			"        ),",
			"      );",
			"}",
			"",
			"class _${1:Page Name}Form extends StatelessWidget {",
			"  const _${1:Page Name}Form({super.key});",
			"",
			"  @override",
			"  Widget build(BuildContext context) {",
			"    return const Placeholder();",
			"  }",
			"}",
			""
		]
	},
	"localization": {
		"prefix": "translate",
		"description": "localization",
		"scope": "dart",
		"body": [
			"AppLocalizations.of(context)."
		]
	},
	"Bloc onEvent": {
		"prefix": "bloconevent",
		"description": "Bloc onEvent",
		"scope": "dart",
		"body": [
			"on<${1:Event}>(_on${1:Event});"
		]
	},

	"Bloc event handler": {
  "prefix": "blochandler",
  "body": [
	"void _on${1:Event}(",
	"    ${1:Event} event,",
	"    Emitter<${2:State}> emit,",
	") {",
	"  // nope",
	"}"
],
  "description": "Bloc event handler"
}
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}